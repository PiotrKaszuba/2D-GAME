#include "Player.h"



Player::Player()
{
}

Player::Player(Unit base, World<Physical> *mapa, sf::Keyboard::Key left, sf::Keyboard::Key right, sf::Keyboard::Key up, sf::Keyboard::Key down, sf::Keyboard::Key attack, sf::Keyboard::Key block, sf::Keyboard::Key kick ) : Unit(base)
{
	this->player_left = left;
	this->player_right = right;
	this->player_up = up;
	this->player_down = down;
	this->player_attack = attack;
	this->player_block = block;
	this->player_kick = kick;
    mapa->add_obstacle(this->ID, this);
}


Player::~Player()
{
}

sf::Keyboard::Key Player::get_player_left()
{
	return this->player_left;
}

sf::Keyboard::Key Player::get_player_right()
{
	return this->player_right;
}

sf::Keyboard::Key Player::get_player_up()
{
	return this->player_up;
}

sf::Keyboard::Key Player::get_player_down()
{
	return this->player_down;
}

sf::Keyboard::Key Player::get_player_block()
{
	return this->player_block;
}

sf::Keyboard::Key Player::get_player_attack()
{
	return this->player_attack;
}

sf::Keyboard::Key Player::get_player_kick()
{
	return this->player_kick;
}

void Player::check_event(sf::Event Event)
{

	if (Event.type == sf::Event::KeyReleased)
	{

		if (Event.key.code == this->get_player_up() || Event.key.code == this->get_player_down())
		{
			this->change_direction(y_none);


		}
		if (Event.key.code == this->get_player_left() || Event.key.code == this->get_player_right())
		{
			this->change_direction(x_none);

		}
		if (Event.key.code == this->get_player_block())
		{
			this->start_action(block, false);

		}
		if (Event.key.code == this->get_player_attack())
		{
			this->start_action(attack, false);

		}

	}
	if (Event.type == sf::Event::KeyPressed)
	{


		if (Event.key.code == this->get_player_up())
		{
			this->change_direction(y_up);

		}

		if (Event.key.code == this->get_player_down())
		{
			this->change_direction(y_down);

		}

		if (Event.key.code == this->get_player_left())
		{
			this->change_direction(x_left);

		}

		if (Event.key.code == this->get_player_right())
		{
			this->change_direction(x_right);

		}
		if (Event.key.code == this->get_player_block())
		{
			this->start_action(block);
		}
		if (Event.key.code == this->get_player_attack())
		{
			this->start_action(attack);
		}
		if (Event.key.code == this->get_player_kick())
		{
			this->start_action(kick);
		}
	}
}

void Player::update(World<Physical>*mapa)
{
	if (this->health > 0)
	{
		this->being_hit();
		this->Movement();
		this->attacking(mapa);

		this->Border_Collision(mapa);
		this->Physical_Collision(mapa);
		this->Animate();

		mapa->draw(*this);
		this->health_display_update(mapa);
	}
	else 
	{
		
		mapa->get_obstacle()[this->ID]->zero_collision();
	}
}