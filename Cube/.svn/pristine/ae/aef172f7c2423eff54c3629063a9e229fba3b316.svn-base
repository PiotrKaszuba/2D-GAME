
#include "Player.h"
#include <vector>


/*  Copyright notice / uses
 
   1. SFML API :
Original website: http://www.sfml-dev.org
License: https://opensource.org/licenses/Zlib

  2. Rabbit Sprite Sheets :
Credits: Art by Stephen "Redshrike" Challener and the OpenSurge Team ( http://opensnc.sourceforge.net). 
Commissioned by OpenGameArt.org (http://opengameart.org)
Original work possible to download: http://opengameart.org/content/surge-of-opensurge-for-ultimate-smash-friends
License: http://creativecommons.org/licenses/by/3.0/,
http://static.opengameart.org/OGA-BY-3.0.txt
Changes: An orange rabbit Sprite Sheet's background was changed to the color of grey one. 
Some animation frames were moved by specific offsets to remove frame overlapping.

  3. "Blazed" font :
Credits: author: Bright Ideas
Downloaded from: http://all-free-download.com/font/download/blazed_font_2082.html
*/

//font charset name
const std::string name_font_blazed = "Blazed.ttf";
//sprite sheet texture names
 const std::string name_image_lis = "texture.png";
 const std::string name_image_lis2 = "texture2.png";

int main()
{
	//initialize data
	// new variables for animated objects data
	Sprite_Sheet_Data lis;
	Sprite_Sheet_Data lis2;
	// initializing particular sheets data
    //lis
	//set it to number of frames before creating effective frames array for type of animation 
	//and just copy 'block of effective frames initialization'
	int effective_frames_help = 0;
	// sprite sheet width
	lis.size = 1096; 
	// size of object's body collision
	lis.width = 36; lis.height = 36;

	//creating animation data with number of frames, starting pixels, pixel jumps to another frame and size modifier for animation load purpose
	lis.still = Type_of_Animation(1, sf::Vector2i(2, 18), sf::Vector2i(68, 0), sf::Vector2i(18, 40));
	lis.go = Type_of_Animation(6, sf::Vector2i(8, 100), sf::Vector2i(68, 0), sf::Vector2i(18, 40));
	
	effective_frames_help = 6;
	// block of effective frames initialization
	int *lis_attack_effective_frames = new int[effective_frames_help];
	for (int i = 0; i < effective_frames_help;i++)
	{
		lis_attack_effective_frames[i] = 0;
	}
	// then you set your actually effective frames to desired values
	// 0 is no effect
	// 1 is attack that deals 1/5 of damage, interrupts enemy, does not damage blocking enemy
	// 2 deals full damage, knocks enemy back, deals 1 damage when blocked
	// 3 deals 110% damage no matter if enemy blocks, knocks back and up
	lis_attack_effective_frames[1] = 1;
	lis_attack_effective_frames[4] = 2;

	// more animations
	lis.attack = Type_of_Animation(6, sf::Vector2i(0, 448), sf::Vector2i(62, 0), sf::Vector2i(18, 40), lis_attack_effective_frames);
	lis.interrupted = Type_of_Animation(2, sf::Vector2i(280, 18), sf::Vector2i(0, 0), sf::Vector2i(18, 40));
	lis.hit = Type_of_Animation(2, sf::Vector2i(214, 17), sf::Vector2i(0, 0), sf::Vector2i(18, 40));
	lis.block = Type_of_Animation(1, sf::Vector2i(55, 274), sf::Vector2i(0,0), sf::Vector2i(18, 40));

	effective_frames_help = 4;
	int *lis_kick_effective_frames = new int[effective_frames_help];
	for (int i = 0; i < effective_frames_help;i++)
	{
		lis_kick_effective_frames[i] = 0;
	}
	lis_kick_effective_frames[3] = 3;
	lis.kick = Type_of_Animation(4, sf::Vector2i(0, 748), sf::Vector2i(72, 0), sf::Vector2i(34, 40), lis_kick_effective_frames);
	
	// copying data to another skin of the character
	lis2 = lis;
	
	// create and load image for sprite
	sf::Image imlis;
	imlis.loadFromFile(name_image_lis);

	sf::Image imlis2;
	imlis2.loadFromFile(name_image_lis2);
	
	// mask color of loaded image background
	imlis.createMaskFromColor(sf::Color(0, 128, 128, 255));

	imlis2.createMaskFromColor(sf::Color(0, 128, 128, 255));

	// create texture from image
	sf::Texture tex_lis;
	tex_lis.loadFromImage(imlis);

	sf::Texture tex_lis2;
	tex_lis2.loadFromImage(imlis2);

	// create sprite from texture with starting pixels of picture that should be shown at first and its width and height of view (not necessary for animated)
	sf::Sprite xslis = sf::Sprite(tex_lis, sf::IntRect(0, 0, lis.width, lis.height));

	sf::Sprite xslis2 = sf::Sprite(tex_lis2, sf::IntRect(0, 0, lis.width, lis.height));

	// send a refence of sprite to data
	lis.data = &xslis;

	lis2.data = &xslis2;
	
	
	

	//

	// create the world with its size, borders, max objects that is able to contain
	// it will keep a dynamic array of pointers to objects
	// it is also your window (derivates from RenderWindow)
	World<Physical> *mapa = new World<Physical>(sf::Vector2i(800,600), sf::Vector2i(40,30), 10);
	//

	// create units from data loaded and pass world (to all physical objects too)
	Unit b(0, lis, sf::Vector2f(mapa->Get_border_size().x/2+200, mapa->Get_border_size().y/2 + 200), mapa,  9.f);
	Unit a(1, lis2, sf::Vector2f(mapa->Get_border_size().x/2 + 60, mapa->Get_border_size().y/2 + 60), mapa,  9.f);
	
	// make units become players and define controls
	Player x(a, mapa, sf::Keyboard::Left, sf::Keyboard::Right, sf::Keyboard::Up, sf::Keyboard::Down, sf::Keyboard::Numpad0, sf::Keyboard::Add, sf::Keyboard::Numpad9);
	Player y(b, mapa, sf::Keyboard::A, sf::Keyboard::D, sf::Keyboard::W, sf::Keyboard::S, sf::Keyboard::LControl, sf::Keyboard::Tab, sf::Keyboard::Tilde);
	
	//creating a collection of players and adding all players to it
	//makes it easier to check events
	std::vector<Object*> players;
	players.push_back(&x);
	players.push_back(&y);
	//
	// used to order updating objects
	bool alfa = 0;
	//

	// creating window 
	
	
	//putting game window in the top left hand corner
	mapa->setPosition(sf::Vector2i(0,0));
	
	//game speed in frames per second
	mapa->setFramerateLimit(20);
	//
	while (mapa->isOpen())
	{
		
		// your event loop to trigger actions
		sf::Event event;
		while (mapa->pollEvent(event))
		{
			
			if (event.type == sf::Event::Closed)
			{
				//delete all effective_frames data
				delete[] lis_attack_effective_frames;
				mapa->close();
			}
			// player event checking
			for each (Player* v in players)
			{
				//pass your event pool into the checks
				v->check_event(event);
			}




			
		}

		//remove stuff from window before drawing new frame
		mapa->clear();
		
		// collision check part 1. kick , 2. attack, 3. other guy collision, 4. kickin & attaking guy collision
		// 5. other guy center, 6. attaking guy center
		/*
		sf::RectangleShape vc(sf::Vector2f(36/4+70/5, 36/4+76/8));
		//vc.setOrigin(18,18);
		vc.setPosition(y.getPosition().x + 36 / 4 , y.getPosition().y - 18 - 76 / 8);
	    mapa->draw(vc);
		
		sf::RectangleShape qc(sf::Vector2f( 54 / 5, 76 / 6));
		//qc.setOrigin(18, 18);
		qc.setPosition(y.getPosition().x + 36 / 2, y.getPosition().y );
		mapa->draw(qc);


		sf::RectangleShape gc(sf::Vector2f(36, 36));
		gc.setOrigin(18, 18);
		gc.setPosition(sf::Vector2f(x.getPosition().x, x.getPosition().y));
		mapa->draw(gc);

		sf::RectangleShape bc(sf::Vector2f(36, 36));
		bc.setOrigin(18, 18);
		bc.setPosition(sf::Vector2f(y.getPosition().x,y.getPosition().y));
		mapa->draw(bc);
		sf::CircleShape af(6, 30);
		af.setFillColor(sf::Color(100, 40, 150, 255));
		af.setPosition(x.getPosition());
		mapa->draw(af);
		//
		sf::CircleShape v(2, 10);
		v.setPosition(y.getPosition().x, y.getPosition().y);
		v.setOutlineColor(sf::Color::Cyan);
		v.setFillColor(sf::Color::Cyan);
		mapa->draw(v);


		*/
		//
		
		// update physical and lower level objects

		// update moving and higher level objects
		// alfa used to switch between the update order : default and from behind to balance priority
		if (alfa) {
			x.update(mapa);
			y.update(mapa);

			alfa = false;
		}
		else
		{
			y.update(mapa);
			x.update(mapa);

			alfa = true;
		}
		//
	
		
		
		// showing all stuff
		mapa->display();
	}

	return 0;
}

