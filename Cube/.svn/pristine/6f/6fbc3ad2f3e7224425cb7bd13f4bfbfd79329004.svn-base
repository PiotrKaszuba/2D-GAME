#include "Physical.h"






Physical::Physical()
{
}

Physical::Physical(int ID, Sprite_Sheet_Data base, sf::Vector2f position, World<Physical> *mapa, int weight) : Animated(ID,base,position)
{
	this->weight = weight;
	mapa->add_obstacle(this->ID, this);
	mapa->Set_objects(1);
}

Physical::~Physical()
{
}

int Physical::get_weight()
{
	return this->weight;
}

void Physical::set_weight(int value)
{
	this->weight = value;
}


void Physical::add_velocity(sf::Vector2f velocity)
{
}

void Physical::deal_damage(Physical *dealer, float damage)
{
}

float Physical::get_damage()
{
	return 0.0f;
}

void Physical::activate(Physical *target)
{
}

void Physical::Direct_Move(int x, int y)
{
	this->setPosition(this->getPosition().x + x, this->getPosition().y + y);
}

void Physical::Move_Away(Physical * moved, Physical * steady)
{
	if (abs(moved->getPosition().x - steady->getPosition().x) - steady->Get_width() / 2 - moved->width / 2 > abs(moved->getPosition().y - steady->getPosition().y) - steady->Get_height() / 2 - moved->height / 2)
		if (moved->getPosition().x <= steady->getPosition().x)
		{

			moved->Direct_Move(-(moved->getPosition().x + moved->width / 2 - (steady->getPosition().x - steady->Get_width() / 2)), 0);
		}
		else
			moved->Direct_Move(-(moved->getPosition().x - moved->width / 2 - (steady->getPosition().x + steady->Get_width() / 2)), 0);

	else
		if (moved->getPosition().y <= steady->getPosition().y)
		{

			moved->Direct_Move(0, -(moved->getPosition().y + moved->height / 2 - (steady->getPosition().y - steady->Get_height() / 2)));
		}
		else
			moved->Direct_Move(0, -(moved->getPosition().y - moved->height / 2 - (steady->getPosition().y + steady->Get_height() / 2)));

}


void Physical::Physical_Collision(World<Physical>*mapa)
{

	for (int i = 0;i < mapa->Get_objects();i++)
	{
		if (mapa->get_obstacle()[i]->Get_ID() != this->ID) {

			if (this->Get_Rect().intersects(mapa->get_obstacle()[i]->Get_Rect()))
			{
				if (this->weight == 2 && mapa->get_obstacle()[i]->get_weight() == 2)
				{

					this->Move_Away(this, mapa->get_obstacle()[i]);

				}
				else
				{

					if (this->weight == 1 && mapa->get_obstacle()[i]->get_weight() == 2)
					{
						this->activate(mapa->get_obstacle()[i]);
					}

					if (this->weight == 2 && mapa->get_obstacle()[i]->get_weight() == 1)
					{
						mapa->get_obstacle()[i]->activate(this);
					}

				}

			}
		}

	}
}