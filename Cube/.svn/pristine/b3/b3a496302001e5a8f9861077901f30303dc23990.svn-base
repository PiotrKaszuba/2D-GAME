#pragma once
#include "Sprite_Sheet.h"

//states that unit might be in
// 0 - 3 are possible to immediately break
// 4 - 6 must finish before taking further action
enum state {
	still,
	go,
	block,
	attack,
	kick,
	interrupted,
	hit
};
// right or left; which direction object faces
enum side {
	r,
	l
};

//this class represents objects that animate between frames

class Animated :
	public Sprite_Sheet
{
protected:
	int animated_frame;
	state animated_state;
	side animated_side;

public:
	Animated();
	Animated(int ID, Sprite_Sheet_Data base, sf::Vector2f position);
	// call this (in update usually) to animate object
	void Animate();
	
	// function to put in main or engine that does all work for the object during a frame
	// put there all functions that describe what unit is able to do and update any changing data (the functions are commented to use them here)
	// it also draws the object to the World
	virtual void update();
	state get_animated_state();
	void set_animated_state(state animated_state);
	void set_animated_frame(int animated_frame);
	// having it here makes it possible to set velocity to 0 after finishing animation in Animate
	virtual void set_velocity(sf::Vector2f velocity);


	
	~Animated();
};

