#pragma once
#pragma once
#include "Animated.h"

class Unit;

// represents objects that might collide with others
// constructor adds the object to World's array of objects that checks for collision
// weight value:
// 0 - passing object that does not activate pass effects and is passable
// 1 - effect on passing object, does not activate pass effects and is with effect passable
// 2 - non-passing object that does activate pass effects and is non-passable
//  collision  cases:
// 0 - 0 , 0 - 1, 1 - 0, 1 - 1, 0 - 2, 2 - 0 - pass
// 1 - 2, 2 - 1 - activates effect and pass
// 2 - 2 - does not pass
class Physical :
	public Animated
{
protected:
	int weight;
public:
	Physical();
	Physical(int ID, Sprite_Sheet_Data base, sf::Vector2f position, World<Physical> *mapa, int weight = 2);
	~Physical();
	int get_weight();
	// those virtuals make it possible to use Unit values from Physical class (World is for Physical in default)
	virtual void add_velocity(sf::Vector2f velocity);
	virtual void deal_damage(float damage);
	virtual float get_damage();
	virtual void activate(Physical *target);

	
};



