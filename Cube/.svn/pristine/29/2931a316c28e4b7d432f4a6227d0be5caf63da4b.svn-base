#include "Column.h"



Column::Column()
{
}

Column::Column(int ID, Sprite_Sheet_Data base, sf::Vector2f position, World<Physical>* mapa) : Physical(ID, base, position, mapa)
{
	this->weight = 3;
	this->x = rand() % 10;
	this->y = rand() % 10;
	this->z = rand() % 10;
	this->hint_lifetime = 0;
	this->hint_display.setFont(*mapa->get_font());
	this->wskazowka = permutacja;
	this->prawdziwosc = 1;
	if (this->prawdziwosc)
		this->hint_display.setColor(sf::Color::Green);
	else 	
		this->hint_display.setColor(sf::Color::Red);
	if (this->wskazowka == suma_wieksza)
		this->a = '>';
	if (this->wskazowka == suma_mniejsza)
		this->a = '<';
	if (this->wskazowka == podzielnosc)
		this->a = '|';
	if (this->wskazowka == nie_ma_cyfry)
		this->a = '?';
	if (this->wskazowka == permutacja)
		this->a = '!';
}

void Column::activate(Physical * target)
{
	target->set_use_item(this);
}

void Column::useit(Physical * user)
{
	this->hint_lifetime = 100;
}

void Column::update(World<Physical>* mapa)
{
	this->Animate();
	mapa->draw(*this);
	this->hint_display_update(mapa);
}
void Column::hint_display_update(World<Physical>* mapa)
{
	if (this->hint_lifetime != 0)
	{
		this->hint_display.setString(std::string(1, a).append(std::to_string(int(this->x)).append(std::to_string(int(this->y)).append(std::to_string(int(this->y))))));
	
		this->hint_display.setPosition(this->getPosition().x - 36.f, this->getPosition().y - float(this->height) / 2 - float(this->sprite_sheet_animation_num[this->animated_state].Get_type_of_animation_size_modifier().y * this->getScale().y) / 2 - 30.f);
	
		mapa->draw(this->hint_display);
		this->hint_lifetime -= 1;
	}
}

Column::~Column()
{
}
